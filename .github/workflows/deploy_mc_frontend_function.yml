name: "[_CD] Frontend deploy function"
concurrency:
  group: ${{ github.workflow }}-${{ inputs.subsystem }}-frontend-${{ github.ref }}-${{ github.sha }}
  cancel-in-progress: true

on:
  workflow_call:
    secrets:
      MC_DEPLOY_IAM_ROLE_ARN:
        required: true
        description: "The IAM role ARN to assume for deployment"
    inputs:
      tenancy:
        type: string
        required: true
        description: "The tenancy to deploy to."
      subsystem:
        type: string
        required: true
        description: "The subsystem to run the deploy for."
      aws-account:
        type: string
        required: true
        description: "The AWS account to deploy to."
      aws-region:
        type: string
        required: true
        description: "The AWS region to deploy to."
      env:
        type: string
        required: true
        description: "The environment to deploy to."
      short-env:
        type: string
        required: true
        description: "The short environment to deploy to."
      working-directory:
        type: string
        required: true
        description: "The working directory to run the deploy in."

jobs:
  frontend-deploy-function:
    runs-on:
      labels: 4-core-runners
    environment: ${{ inputs.env }}
    timeout-minutes: 120

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.MC_DEPLOY_IAM_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR (us-east-1)
        id: login-ecr-us-east-1
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-east-1
        with:
          registry-type: public

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to Amazon ECR (default region)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set env file
        run: |
          echo "NEXT_PUBLIC_API_HOST_PLACEHOLDER=$(jq '.${{ inputs.tenancy }}.${{ inputs.short-env }}' < ./env.json)" > ./.env.production
        working-directory: ${{ inputs.working-directory }}

      # ECRの更新
      - name: build and push Docker image app
        uses: docker/build-push-action@v6
        id: build-image-app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app
        with:
          push: true
          context: .
          file: docker/${{ inputs.subsystem }}/frontend/Dockerfile.${{ inputs.env }}
          platforms: linux/arm64
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ inputs.subsystem }}-frontend-app-cache
          cache-to: |
            ${{ github.ref == 'refs/heads/develop' && format('type=gha,mode=max,scope={0}-frontend-app-cache', inputs.subsystem) || '' }}
          provenance: false

      - name: build and push Docker image proxy
        uses: docker/build-push-action@v6
        id: build-image-proxy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app-proxy
        with:
          push: true
          context: .
          file: docker/${{ inputs.subsystem }}/frontend/Dockerfile.nginx.${{ inputs.env }}
          platforms: linux/arm64
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ inputs.subsystem }}-frontend-proxy-cache
          cache-to: |
            ${{ github.ref == 'refs/heads/develop' && format('type=gha,mode=max,scope={0}-frontend-proxy-cache', inputs.subsystem) || '' }}
          provenance: false

      - name: Get task-definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app --query taskDefinition --output json > ./${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app.json

      - name: Fill in the new image ID and REVISION tag in the Amazon ECS task definition for app container
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app
        with:
          task-definition: ./${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app.json
          container-name: "app"
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          environment-variables: "REVISION=${{ github.sha }}"
          log-configuration-options: |
            awslogs-stream-prefix=${{ github.sha }}

      - name: Fill in the new image ID and REVISION tag in the Amazon ECS task definition for proxy container
        id: render-proxy-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app-proxy
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          container-name: "proxy"
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          environment-variables: "REVISION=${{ github.sha }}"
          log-configuration-options: |
            awslogs-stream-prefix=${{ github.sha }}

      # - name: Fill in the new image ID and REVISION tag in the Amazon ECS task definition for logrouter container
      #   id: render-logrouter-container
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.render-proxy-container.outputs.task-definition }}
      #     container-name: "logrouter"
      #     environment-variables: "REVISION=${{ github.sha }}"
      #     log-configuration-options: |
      #       awslogs-stream-prefix=${{ github.sha }}

      - name: deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-proxy-container.outputs.task-definition }}
          # task-definition: ${{ steps.render-logrouter-container.outputs.task-definition }}
          cluster: ${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe
          service: ${{ inputs.tenancy }}-${{ inputs.short-env }}-${{ inputs.subsystem }}-fe-app
          propagate-tags: TASK_DEFINITION
          wait-for-service-stability: false
